Программа выполнена Гуськовым Д.А. в качестве тестового задания в QRator Labs.
По всем вопросам обращаться на mail: demongusk@yandex.ru

Использование:
Проект написан на С++ и собирается с помощью qmake. Для debian систем он устанавливается с помощью команды: sudo apt-get install qt5-qmake.

Для запуска програмы необходимо в качестве параметра указать путь к файлу с описанием топологии в формате:
    <ASsrc> <ASdst> <priority>
    <ASsrc> <ASdst> <priority>
    ...
    <ASsrc> <ASdst> <priority>
Где <ASsrc> и <ASdst> - Номера автономных систем (далее АС), связанных физическим каналом связи, и по этому каналу связи анонсы идут от АС с номером <ASsrc> к АС с номером <ASdst>, при этом АС <ASsrc> имеет приоритет <priority> для АС <ASdst>.
замечание 1: <priority> не можут быть меньше 0.
замечание 2: размер топологии может быть любым, но не меньше 2. (в исходном задании сказано про 4 маршрутизатора)
Пример запуска программы: "./QRatorTestTask ../topo.txt ../solution.txt"

замечание 3: В программе считается, что начальный анонс выходит из первой встретившейся АС в файле топологий, и больше роутеры не анонсируют ничего самопроизвольно.
замечание 4: Если роутер получил анонс, в котором указан номер АС, которой он принадлежит, то он не реагирует на этот анонс.

=====================================================================================
===== АЛГОРИТМ ======
DijkstraBasedAlgotithm в routingеablesolver
Алгоритм состоит из двух частей:
 i)     применение адаптированного алгоритма Дейкстры и получение матрицы кратчайших путей с учтом приоритетов. Сложность алгоритма O(n*log(n) + m*log(n)), где n - количество узлов, а m - количество рёбер. Сложность реализации O(n^2)

 ii)    Для каждой вершины определение соседней вершины куда будет идти трафик и определение всего пути. Сложность алгоритма O(n*log(n)), где n - количество узлов, а m - количество рёбер.

Итоговая сложность алгоритма равна O(n*log(n) + m*log(n))

===========================================================================================
На выходе программа выдаёт в стандартный поток вывода информацию о путях используемых каждым BGP маршрутизатором после процесса сходимости в формате:

AS number   |    announce path
    0            0.
    1            0.3.1.
    3            0.1.3.
    2            0.1.2.
    4            0.1.2.4.
    5             --------
    6             --------
    7             --------

Где в каждой строчке слева записан номер АС, а справа через точку последовательность вершин, через которые проходит путь.
